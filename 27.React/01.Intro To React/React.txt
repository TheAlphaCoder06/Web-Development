React is composible.
It is declarative rather than imperative.
    -Declarative means:
        What should be done?
        "Just tell me what to do, and I'll worry about how I fet it done"
    -Imperative
        How should it be done?
        "Describe to me every step on how to do something, and I'll do it"

// Challenge

   Recreate the above line of code in vanilla js by creating and appending an h1 to our div#root(withoout using innerHTML)
   - Create a new h1 Element
   - Give it some textContent
   - Append it as a child of the div#root

Solution
  -Using Vanilla JS
  const h1 = document.createElement("h1");
  h1.textContent = "This is an imperative way to program"
  h1.className = "header";
  document.getElementById("root").append(h1);

  -Using React
  const root = ReactDOM.createRoot(document.getElementById('root'));
  root.render(<h1 className="header">This is an imperative way to program</h1>)
- We can render only one parent element in one go in react

//Challenge

/*
  -Use semantic `nav` element as the parent wrapper 
  - Have an h1 element with the brand name of your "website"
  - Insert an unordered list for the other nav elements
    - Inside the 'ul', have three 'li's for "Pricing", "About", and "Contact"
    -Don't worry about styling yet - it'll just be plain-looking HTML for now
    
Solution:

    const root = ReactDOM.createRoot(document.getElementById('root'));
    
    const nav = (
        <nav>
            <h1>React</h1>
            <ul>
            <li>Pricing</li>
            <li>About</li>
            <li>Contact</li>
            </ul>
        </nav>
    )

    root.render(
        nav
    );

*/

//Challenge

/*
  Find out what happens if we try to append JSX to our div#root using .append() instead of ReactDOM
  1. Create a sample page in JSX (>= 4 elements) and save them in a variable
  2. Select the div with the ID of "root" and use '.append()' to append your JSX
  3. See if you can guess what will show up in the browser before running the code
  4. See if you can explain what actually shows up in the browser
  
  Solution:
  
  const page = (
    <div>
    <h1>This is a JSX element</h1>
    <h2>This is heading 2</h2>
    <p>This is a paragraph</p>
    <hr />
    </div>
    )
    document.getElementById('root').append(page);
    document.getElementById('root').append(JSON.stringify(page));
*/
